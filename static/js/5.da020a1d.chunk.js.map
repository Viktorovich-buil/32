{"version":3,"sources":["Components/pages/Chat/Chat.module.css","Components/pages/Chat/ChatPage.tsx"],"names":["module","exports","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startChatMessagesListening","stopChatMessagesListening","ChatMessages","AddMessageChatForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","ChatMessage","message","id","ref","React","memo","className","classes","src","photo","alt","width","username","userName","textmessage","setNewMessage","addmessage","onChange","value","button","disabled","onClick","sendChatMessage","ChatPage"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,SAAW,uBAAuB,YAAc,0BAA0B,WAAa,yBAAyB,OAAS,uB,+GCcjMC,EAAiB,WAEnB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,gCACS,UAAXN,GAAsB,sDACvB,qCACI,cAACO,EAAD,IACA,cAACC,EAAD,WAKND,EAAyB,WAC3B,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MAFhB,EAGOC,oBAAS,GAHhB,mBAG1BC,EAH0B,KAGZC,EAHY,KAsBjC,OANAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAEG,sBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAlBnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAMH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAE9EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAYjC,UACFL,EAASqB,KAAI,SAACC,GAAD,OAAO,cAACC,EAAD,CAAwBC,QAASF,GAAfA,EAAEG,OACzC,qBAAKC,IAAKzB,QAKZsB,EAAyDI,IAAMC,MAAM,YAAgB,IAAdJ,EAAa,EAAbA,QAEzE,OAAO,sBAAKK,UAAWC,IAAQ9B,SAAxB,UACH,qBAAK+B,IAAKP,EAAQQ,MAAOC,IAAK,SAAUC,MAAO,OAAQxB,OAAQ,SAC/D,qBAAKmB,UAAWC,IAAQK,SAAxB,SACI,4BAAIX,EAAQY,aAEhB,qBAAKP,UAAWC,IAAQO,YAAxB,SACI,4BAAIb,EAAQA,kBAMlBzB,EAA+B,WAAO,IAAD,EACNI,mBAAS,IADH,mBAChCqB,EADgC,KACvBc,EADuB,KAEjCjD,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OAAO,sBAAKsC,UAAWC,IAAQS,WAAxB,UACH,8BACI,0BAAWC,SAAU,SAAC3B,GAAD,OAAOyB,EAAczB,EAAEE,cAAc0B,QAAQA,MAAOjB,MAE7E,8BACI,wBAAQK,UAAWC,IAAQY,OAAQC,SAAqB,UAAXpD,EAAoBqD,QAbrD,WACXpB,IAGLnC,EAASwD,YAAgBrB,IACzBc,EAAc,MAQV,wBAKGQ,UA9FY,WAEvB,OAAO,qBAAKjB,UAAWC,IAAQpC,KAAxB,SACH,cAACN,EAAD","file":"static/js/5.da020a1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__6EqPU\",\"messages\":\"Chat_messages__USR76\",\"username\":\"Chat_username__ZDVq0\",\"textmessage\":\"Chat_textmessage__1_c2T\",\"addmessage\":\"Chat_addmessage__1oEuG\",\"button\":\"Chat_button__3j-ai\"};","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../../Api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendChatMessage, startChatMessagesListening, stopChatMessagesListening} from \"../../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport classes from './Chat.module.css'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n\r\n    return <div className={classes.chat}>\r\n        <Chat/>\r\n    </div>\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startChatMessagesListening())\r\n        return () => {\r\n            dispatch(stopChatMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Error. Refresh page</div>}\r\n        <>\r\n            <ChatMessages/>\r\n            <AddMessageChatForm/>\r\n        </>\r\n    </div>\r\n}\r\n\r\nconst ChatMessages: React.FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs(( element.scrollHeight - element.scrollTop) - element.clientHeight) < 350)\r\n        {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n        // console.log(Math.abs(( element.scrollHeight - element.scrollTop) - element.clientHeight))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return <div style={{height: '600px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n        {messages.map((m) => <ChatMessage key={m.id} message={m}/>)}\r\n        <div ref={messagesAnchorRef}/>\r\n    </div>\r\n}\r\n\r\n\r\nconst ChatMessage: React.FC<{ message: ChatMessageAPIType }> = React.memo (({message}) => {\r\n    // console.log('>>>>>>>>>>')\r\n    return <div className={classes.messages}>\r\n        <img src={message.photo} alt={'avatar'} width={'70px'} height={'70px'}/>\r\n        <div className={classes.username}>\r\n            <p>{message.userName}</p>\r\n            </div>\r\n        <div className={classes.textmessage}>\r\n            <p>{message.message}</p>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\nconst AddMessageChatForm: React.FC = () => {\r\n    const [message, setNewMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendChatMessage(message))\r\n        setNewMessage('')\r\n    }\r\n\r\n    return <div className={classes.addmessage}>\r\n        <div>\r\n            <textarea  onChange={(e) => setNewMessage(e.currentTarget.value)} value={message}/>\r\n        </div>\r\n        <div>\r\n            <button className={classes.button} disabled={status !== 'ready'} onClick={sendMessage}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage;\r\n"],"sourceRoot":""}