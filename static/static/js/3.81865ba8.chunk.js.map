{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/Dialogitem/DialogItem.module.css","Components/Dialogs/Message/Message.module.css","Components/Dialogs/Dialogitem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","Hoc/withAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","classes","item","active","imgavatar","src","avatar","alt","to","activeClassName","name","Message","side","messageright","messageleft","message","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","addmessage","inputMessage","createField","required","Textarea","button","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogsItems","value","addMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","messagesPage","newMessageText","actions","addMessageActionCreator","Component","restProps"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,4BAA4B,aAAe,8BAA8B,OAAS,0B,oBCAzQD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,OAAS,2BAA2B,UAAY,gC,oBCAlGD,EAAOC,QAAU,CAAC,YAAc,6BAA6B,aAAe,8BAA8B,QAAU,2B,8GCiBrGC,EARyB,SAACC,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,sBAAKC,UAAWC,IAAQC,KAAO,IAAMD,IAAQE,OAA7C,UACH,qBAAKH,UAAWC,IAAQG,UAAWC,IAAKR,EAAMS,OAAQC,IAAI,yCAC1D,cAAC,IAAD,CAASC,GAAIV,EAAMW,gBAAiBR,IAAQE,OAA5C,SAAqDN,EAAMa,W,kBCKpDC,EAVsB,SAACd,GAElC,OAAO,8BACH,qBAAKG,UAAS,UAFgB,OAAfH,EAAMe,KAAiBX,IAAQY,aAAeZ,IAAQa,aAErE,SACI,qBAAKd,UAAWC,IAAQc,QAAxB,SACKlB,EAAMkB,e,iCCcRC,cAAoC,CAACC,KAAM,uBAAwBC,gBAlB9D,SAACC,EAAaC,GAAd,OAChBA,EAASC,YAAM,2BAiBJL,EAfsF,SAACnB,GAElG,OAAO,sBAAMyB,SAAUzB,EAAM0B,aAAtB,SACH,sBAAKvB,UAAWC,IAAQuB,WAAxB,UACI,qBAAKxB,UAAWC,IAAQwB,aAAxB,SACKC,YAA0C,0BAA2B,iBAAkB,CAACC,KAAWC,OAExG,uBACA,wBAAQ5B,UAAWC,IAAQ4B,OAA3B,iCCuBGC,EA5B0B,SAACjC,GAEtC,IAAIkC,EACAlC,EAAMmC,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYzB,KAAMyB,EAAEzB,KAAMX,GAAIoC,EAAEpC,GAAeO,OAAQ6B,EAAE7B,QAAhB6B,EAAEpC,OAE9EqC,EACAvC,EAAMmC,YAAYK,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAAoBH,KAAM0B,EAAE1B,MAAd0B,EAAEvC,OAM5E,OAEI,sBAAKC,UAAWC,IAAQgC,QAAxB,UACI,qBAAKjC,UAAWC,IAAQsC,aAAxB,SACKR,IAEL,sBAAK/B,UAAWC,IAAQoC,SAAxB,UACI,qBAAKrC,UAAWC,IAAQc,QAAxB,SACKqB,IAEL,cAAC,EAAD,CAAgBd,SAdR,SAACkB,GACjB3C,EAAM4C,WAAWD,EAAME,0B,gCCpB3BC,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,S,YCuBRE,sBACXC,aAnBkB,SAACJ,GAEnB,MAAO,CACHZ,YAAaY,EAAMK,aACnBP,eAAgBE,EAAMK,aAAaC,mBAIlB,SAAC9B,GACtB,MAAO,CACHqB,WAAY,SAACC,GACTtB,EAAS+B,IAAQC,wBAAwBV,UDP9C,SAAiCW,GAUpC,OAHqCL,YACjCL,EAA4B,GADKK,EANkC,SAACnD,GAAW,IAC1EgD,EAAwBhD,EAAxBgD,OAAWS,EAD8D,YACjDzD,EADiD,YAE9E,OAAKgD,EACE,cAACQ,EAAD,eAAeC,IADF,cAAC,IAAD,CAAU9C,GAAI,cCW3BuC,CAGdjB","file":"static/js/3.81865ba8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2c6u7\",\"dialogsItems\":\"Dialogs_dialogsItems__2FqHS\",\"messages\":\"Dialogs_messages__Cc2Of\",\"message\":\"Dialogs_message__HBsyR\",\"addmessage\":\"Dialogs_addmessage__mXIoF\",\"inputMessage\":\"Dialogs_inputMessage__2ViQm\",\"button\":\"Dialogs_button__2PpGc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogItem_item__peID9\",\"active\":\"DialogItem_active__1QqTW\",\"imgavatar\":\"DialogItem_imgavatar__WREzp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageleft\":\"Message_messageleft__1fU7v\",\"messageright\":\"Message_messageright__emU7z\",\"message\":\"Message_message__2DrZ8\"};","import React from \"react\";\r\nimport classes from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    avatar: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return <div className={classes.item + ' ' + classes.active}>\r\n        <img className={classes.imgavatar} src={props.avatar} alt='Аватар'/>\r\n        <NavLink to={path} activeClassName={classes.active}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    side: string\r\n    message: string\r\n}\r\n\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    let style = () => (props.side === 'me') ? classes.messageright : classes.messageleft;\r\n    return <div>\r\n        <div className={`${style()}`}>\r\n            <div className={classes.message}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\nexport default Message;\r\n\r\n\r\n","import classes from \"../Dialogs.module.css\";\r\nimport {createField, Textarea} from \"../../Common/FormsControls/FormControls\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm, reset} from \"redux-form\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst afterSubmit = (result: any, dispatch: any) =>\r\n    dispatch(reset('dialogAddMessageForm'));\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div className={classes.addmessage}>\r\n            <div className={classes.inputMessage}>\r\n                {createField<NewMessageFormValuesKeysType>(\"The sea is calling you!\", \"newMessageBody\", [required], Textarea)}\r\n            </div>\r\n            <br/>\r\n            <button className={classes.button}>Add Message</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\n//\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm', onSubmitSuccess: afterSubmit})(AddMessageForm);\r\n\r\n// export default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\n\r\n\r\n// const afterSubmit = (result: any, dispatch: any) =>\r\n//     dispatch(reset('dialogAddMessageForm'));\r\n","import React from \"react\";\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from \"./Dialogitem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nexport type OwnPropsTypes = {\r\n    dialogsPage: InitialStateType,\r\n    addMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType ={\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsTypes> = (props) => {\r\n\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} avatar={d.avatar}/>);\r\n\r\n    let messagesElements =\r\n        props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} side={m.side}/>);\r\n\r\n    let addNewMessage = (value: NewMessageFormValuesType) => {\r\n        props.addMessage(value.newMessageBody);\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div className={classes.message}>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// {/*<Field className={classes.inputMessage} component={Textarea} name={'newMessageBody'} placeholder='The sea is calling you!' validate={[required]}/>*/}\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n}as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect <WCP> (Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC <MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/log'}/>\r\n        return <Component {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from 'react';\r\nimport {\r\n    actions,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withAuthRedirect} from \"../../Hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\r\n    return {\r\n        dialogsPage: state.messagesPage,\r\n        newMessageBody: state.messagesPage.newMessageText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addMessage: (newMessageBody: string) => {\r\n            dispatch(actions.addMessageActionCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)\r\n(Dialogs);\r\n\r\n\r\n\r\n\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addMessage: (newMessageBody) => {\r\n//             dispatch(actions.addMessageActionCreator(newMessageBody));\r\n//         }\r\n//     }\r\n// }\r\n"],"sourceRoot":""}